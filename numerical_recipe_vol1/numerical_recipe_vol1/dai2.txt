#include <math.h>
#include "nrutil.h"
#include <stdio.h>
#define SWAP(a,b) {temp=(a);(a)=(b);(b)=temp;}
#define N 3

void gaussj(float **a, int n, float **b, int m)
{
	int *indxc, *indxr, *ipiv;
	int i, icol, irow, j, k, l, ll;
	float big, dum, pivinv, temp;
	indxc = ivector(1, n); //The integer arrays ipiv, indxr, and indxc are
	indxr = ivector(1, n); //used for bookkeeping on the pivoting.
	ipiv = ivector(1, n);
	for (j = 1; j <= n; j++) ipiv[j] = 0;
	for (i = 1; i <= n; i++) {
		//This is the main loop over the columns to be reduced.
		big = 0.0;
		for (j = 1; j <= n; j++) //This is the outer loop of the search for a pivot element.
			if (ipiv[j] != 1)
				for (k = 1; k <= n; k++) {
					if (ipiv[k] == 0) {
						if (fabs(a[j][k]) >= big) {
							big = fabs(a[j][k]);
							irow = j;
							icol = k;
						}
					}
				}
		++(ipiv[icol]);
		/*We now have the pivot element, so we interchange rows, if needed, to put the pivot
		element on the diagonal.The columns are not physically interchanged, only relabeled :
		indxc[i], the column of the ith pivot element, is the ith column that is reduced, while
		indxr[i] is the row in which that pivot element was originally located.If indxr[i]  =
		indxc[i] there is an implied column interchange.With this form of bookkeeping, the
		solution b’s will end up in the correct order, and the inverse matrix will be scrambled
		by columns.*/
		if (irow != icol) {
			for (l = 1; l <= n; l++) SWAP(a[irow][l], a[icol][l])
				for (l = 1; l <= m; l++) SWAP(b[irow][l], b[icol][l])
		}
		indxr[i] = irow; //We are now ready to divide the pivot row by the
		indxc[i] = icol; //pivot element, located at irow and icol.
		if (a[icol][icol] == 0.0) nrerror("gaussj: Singular Matrix");
		pivinv = 1.0 / a[icol][icol];
		a[icol][icol] = 1.0;
		for (l = 1; l <= n; l++) a[icol][l] *= pivinv;
		for (l = 1; l <= m; l++) b[icol][l] *= pivinv;
		for (ll = 1; ll <= n; ll++) //Next, we reduce the rows...
			if (ll != icol) {
				//...except for the pivot one, of course.
				dum = a[ll][icol];
				a[ll][icol] = 0.0;
				for (l = 1; l <= n; l++) a[ll][l] -= a[icol][l] * dum;
				for (l = 1; l <= m; l++) b[ll][l] -= b[icol][l] * dum;
			}
	}
	//This is the end of the main loop over columns of the reduction.It only remains to unscramble
	//	the solution in view of the column interchanges.We do this by interchanging pairs of
	//	columns in the reverse order that the permutation was built up.
	for (l = n; l >= 1; l--) {
		if (indxr[l] != indxc[l])
			for (k = 1; k <= n; k++)
				SWAP(a[k][indxr[l]], a[k][indxc[l]]);
	}// And we are done.
	free_ivector(ipiv, 1, n);
	free_ivector(indxr, 1, n);
	free_ivector(indxc, 1, n);
}
int main()
{
	int i, j;
	int  k;

	/* NR declarations of matrices: */

	float **a = dmatrix(1, N, 1, N);//Aの方の正方行列
	float **b = dmatrix(1, N, 1, 1);//B
	float **aa = dmatrix(1, N, 1, N);
	float **p = dmatrix(1, N, 1, N);
	/* b is really a vector, but
	gaussj expects a matrix */
	float *x = dvector(1, N);	/* b is really a vector, but
								gaussj expects a matrix */

	/* Set up A and b.  Note the NR convention that indices start at 1. */

	/*
	for (i = 1; i <= N; i++)
	for (j = 1; j <= N; j++)
	{

	a[i][j] = 1.0 / (i + j);
	}
	for (i = 1; i <= N; i++)
	b[i][1] = 1;

	*/

	/*
	a[1][1] = 2.0; a[1][2] = 1.0; a[1][3] = -2.0;
	a[2][1] = 1.0; a[2][2] = 1.0; a[2][3] = -1.0;
	a[3][1] = 1.0; a[3][2] = -2.0; a[3][3] = 3.0;

	b[1][1] = 1; b[2][1] = 4; b[3][1] = -1;
	
	aa[1][1] = 2.0; aa[1][2] = 1.0; aa[1][3] = -2.0;
	aa[2][1] = 1.0; aa[2][2] = 1.0; aa[2][3] = -1.0;
	aa[3][1] = 1.0; aa[3][2] = -2.0; aa[3][3] = 3.0;
	*/

	a[1][1] = 1.0; a[1][2] = 2.0; a[1][3] = 1.0;
	a[2][1] = 1.0; a[2][2] = 1.0; a[2][3] = 3.0;
	a[3][1] = 2.0; a[3][2] = 1.0; a[3][3] = 1.0;

	b[1][1] = 6; b[2][1] = 6; b[3][1] = 5;

	aa[1][1] = 1.0; aa[1][2] = 2.0; aa[1][3] = 1.0;
	aa[2][1] = 1.0; aa[2][2] = 1.0; aa[2][3] = 3.0;
	aa[3][1] = 2.0; aa[3][2] = 1.0; aa[3][3] = 1.0;
	



	/* Print out the initial A and b. */

	printf("initial A and b:\n");

	for (i = 1; i <= N; i++) {
		printf("    ");
		for (j = 1; j <= N; j++) printf("%5.2f ", a[i][j]);
		printf("    %5.2f\n", b[i][1]);
	}

	/* Solve by Gauss-Jordan.  On return, A is replaced by its inverse
	* and b is replaced by the solution matrix. */
	/* Solve by Gauss-Jordan.  On return, A is replaced by its inverse
	* and b is replaced by the solution matrix. */

	gaussj(a, N, b, 1);//aが正方行列、Nが正方行列の幅or高さ、bが右辺の列、1が右辺の行
	/* Print out the final A and b. */

	printf("final A(inv) and b' (sol):\n");

	for (i = 1; i <= N; i++) {
		printf("    ");
		for (j = 1; j <= N; j++) printf("%5.2f", a[i][j]);
		//for (j = 1; j <= N; j++) printf("%d", a[i][j]);
		printf("    %5.2f\n", b[i][1]);
	}

	/* Check that a and aa are now inverses and that we have
	* actually solved the original equation. */

	for (i = 1; i <= N; i++)
		for (j = 1; j <= N; j++) {
			p[i][j] = 0;
			for (k = 1; k <= N; k++)
				p[i][j] += a[i][k] * aa[k][j];
		}

	for (i = 1; i <= N; i++) {
		x[i] = 0;
		for (j = 1; j <= N; j++)
			x[i] += aa[i][j] * b[j][1];
	}

	/* Print out the product matrices P and x. */

	printf("products A * Ainv, A * b':\n");

	for (i = 1; i <= N; i++) {
		printf("    ");
		for (j = 1; j <= N; j++) printf("%5.2f  ", p[i][j]);
		printf("    %5.2f\n", x[i]);
	}
}